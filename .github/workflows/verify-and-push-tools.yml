name: Verify c4p tools

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  basic-test-tools:
    name: Test c4p and its tools
    runs-on: ubuntu-20.04
    if: "!contains(github.event.head_commit.message, '[SKIP CI]')"
    env:
      DOCKER_NETWORK_TYPE: none
      DEBIAN_FRONTEND: noninteractive
    steps:
      - uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Clean system
        run: |
          df -h
          echo "Removing large packages"
          sudo apt-get remove -y '^dotnet-.*' || true
          sudo apt-get remove -y '^llvm-.*' || true
          sudo apt-get remove -y 'php.*' || true
          sudo apt-get remove -y azure-cli google-cloud-sdk hhvm google-chrome-stable firefox powershell mono-devel || true
          sudo apt-get autoremove -y
          sudo apt-get clean
          df -h

      # - name: Set up Docker Layer Caching
      #   uses: satackey/action-docker-layer-caching@v0.0.5

      - name: Test - list available tools
        run: |
          $GITHUB_WORKSPACE/c4p.sh --list
      
      - name: Test - install unexisting tool
        run: |
          echo $( $GITHUB_WORKSPACE/c4p.sh --log-level 4 --tool unexisting || true ) | tee console.txt; \
          [ -s $GITHUB_WORKSPACE/console.txt ] && grep -q "unexisting" console.txt
      
      - name: Test - logging to file and console
        run: |
          echo $( $GITHUB_WORKSPACE/c4p.sh --log-level 4 --log-file logs.txt --tool unexisting || true ) | tee console.txt; \
          [ -s $GITHUB_WORKSPACE/logs.txt ] && [ -s $GITHUB_WORKSPACE/console.txt ]
      
      - name: Test - logging only to file
        run: |
          echo $( $GITHUB_WORKSPACE/c4p.sh --log-level 4 --log-file logs.txt --only-log-file --tool unexisting || true ) | tee console.txt; \
          [ -s $GITHUB_WORKSPACE/logs.txt ] && ! grep -q '[^[:space:]]' $GITHUB_WORKSPACE/console.txt
      
      - name: Test - install all available tools
        run: |
          $GITHUB_WORKSPACE/c4p.sh --fail --log-level 4 --log-file $GITHUB_WORKSPACE/c4p-logs.txt -t all 
      
      - name: Archive log artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Tool build logs
          path: | 
            /tmp/c4p.docker-*
            c4p-logs.txt

  build-and-push-docker-image:
    name: Build Docker image and push to repositories
    needs: test-tools
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - context: ./tools/aircrack-ng
            dockerfile: ./tools/aircrack-ng/Dockerfile
            image: containers4pentesters/aircrack-ng
          - context: ./tools/airbase-ng
            dockerfile: ./tools/airbase-ng/Dockerfile
            image: containers4pentesters/airbase-ng
          - context: ./tools/airdecap-ng
            dockerfile: ./tools/airdecap-ng/Dockerfile
            image: containers4pentesters/airdecap-ng
          - context: ./tools/airdecloak-ng
            dockerfile: ./tools/airdecloak-ng/Dockerfile
            image: containers4pentesters/airdecloak-ng
          - context: ./tools/aireplay-ng
            dockerfile: ./tools/aireplay-ng/Dockerfile
            image: containers4pentesters/aireplay-ng
          - context: ./tools/airmon-ng
            dockerfile: ./tools/airmon-ng/Dockerfile
            image: containers4pentesters/airmon-ng
          - context: ./tools/airodump-ng
            dockerfile: ./tools/airodump-ng/Dockerfile
            image: containers4pentesters/airodump-ng
          - context: ./tools/airolib-ng
            dockerfile: ./tools/airolib-ng/Dockerfile
            image: containers4pentesters/airolib-ng
          - context: ./tools/airserv-ng
            dockerfile: ./tools/airserv-ng/Dockerfile
            image: containers4pentesters/airserv-ng
          - context: ./tools/airtun-ng
            dockerfile: ./tools/airtun-ng/Dockerfile
            image: containers4pentesters/airtun-ng
          - context: ./tools/airventriloquist-ng
            dockerfile: ./tools/airventriloquist-ng/Dockerfile
            image: containers4pentesters/airventriloquist-ng
          - context: ./tools/cewl
            dockerfile: ./tools/cewl/Dockerfile
            image: containers4pentesters/cewl
          - context: ./tools/ffuf
            dockerfile: ./tools/ffuf/Dockerfile
            image: containers4pentesters/ffuf
          - context: ./tools/gobuster
            dockerfile: ./tools/gobuster/Dockerfile
            image: containers4pentesters/gobuster
          - context: ./tools/hping3
            dockerfile: ./tools/hping3/Dockerfile
            image: containers4pentesters/hping3
          - context: ./tools/nikto
            dockerfile: ./tools/nikto/Dockerfile
            image: containers4pentesters/nikto
          - context: ./tools/nmap
            dockerfile: ./tools/nmap/Dockerfile
            image: containers4pentesters/nmap
          - context: ./tools/reaver
            dockerfile: ./tools/reaver/Dockerfile
            image: containers4pentesters/reaver
          - context: ./tools/sqlmap
            dockerfile: ./tools/sqlmap/Dockerfile
            image: containers4pentesters/sqlmap
          - context: ./tools/dex2jar
            dockerfile: ./tools/dex2jar/Dockerfile
            image: containers4pentesters/dex2jar
          - dockerfile: ./tools/vineflower/Dockerfile
            image: containers4pentesters/vineflower

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: containers4pentesters
          password: ${{ secrets.DOCKER_SECRET }}

      - name: Extract metadata (tags, labels) for Docker image ${{ matrix.image }}
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ matrix.image }}
          tags: |
            type=raw,value=latest

      - name: Build and push Docker image ${{ matrix.image }}
        uses: docker/build-push-action@v3
        id: docker_build
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Image ${{ matrix.image }} digest
        run: echo ${{ steps.docker_build.outputs.digest }}
