#!/usr/bin/env bash
# Install common pentester tools in containers as if they were native
#
# Copyright 2022 TheArqsz

SCRIPTPATH="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
TOOLS_DIR="$SCRIPTPATH/tools"


# Print usage of this script
help()
{
   echo "Usage: ./`basename "$0"` -t tool..."
   echo "Install common pentester tools in containers as if they were native"
   echo
   echo "Optional arguments:"
   echo "   -t, --tool        Tool to be installed (default: all)"
   echo "   -f, --force       Force install tool"
   echo "   -l, --list        List available tools"
   echo "   -v, --verbose     Set verbose mode"
   echo
}

# Print banner with the name of the script 
banner()
{
cat << EOF
   ___  _ _   ___ 
  / __|| | | | _ \\
 | (__ |_  _||  _/
  \___|  |_| |_|  
                                       
EOF
}

# Traps
# failure() {
# 	local lineno=$1
# 	local msg=$2
# 	if [ "$1" != "0" ]; then
# 		echo "	> [`date`] Failed at line $lineno: '$msg'"
# 	fi
# }
# trap 'failure ${LINENO} "$BASH_COMMAND"' ERR

# cleanup() {
# 	if [ "$?" = "0" ]; then
# 		echo "Script finished"
# 		read -p "Press CTRL-C to interrupt cleaning or wait 5 sec to continue" -t 5
#       echo
# 	fi
# }
# trap cleanup EXIT

ctrl_c() {
	echo
	echo "Interrupting..."
	exit 1
}
trap ctrl_c INT

# Verify that necessary files exist
verify() {
    dir_to_check=$1
    files_in_dir=$(ls -1 $dir_to_check)
    if [ -f $dir_to_check/.skip ]; then
        echo "Skipping tool from $dir_to_check via .skip file"
        return 1
    fi
    if ! [ -f $dir_to_check/Dockerfile ]; then
        echo "Dockerfile doesn't exist in directory $dir_to_check. Skipping"
        return 1
    fi
    if ! [ -f $dir_to_check/install.sh ]; then
        echo "install.sh doesn't exist in directory $dir_to_check. Skipping"
        return 1
    fi
    if ! [ -f $dir_to_check/run.sh ]; then
        echo "run.sh doesn't exist in directory $dir_to_check. Skipping"
        return 1
    fi
    if ! [ -f $dir_to_check/test.sh ]; then
        echo "test.sh doesn't exist in directory $dir_to_check. Skipping"
        return 1
    fi
}

verify_tool_exists() {
    if ! [ -d $TOOLS_DIR/$1 ]; then
        echo "Tool $1 doesn't exist - exiting"
        exit 1
    fi
}

list_tools () {
    echo "Available tools: "
    for tool in $(ls -1 $TOOLS_DIR/); do
        if [ "$tool" == "template" ]; then
            continue
        fi
        echo -e "\t $tool"
    done
}

tool="all"
force_install=0
force_fail_on_error=0

# Loop that sets arguments for the script
while [ -n "$1" ]; do 
	case "$1" in
	    -h|--help) 
         banner
         help
         exit;;
   	    -t|--tool)
         tool=$2
         verify_tool_exists $tool
         shift
         ;;
   	    -f|--force)
         force_install=1
         shift 0
         ;;
   	    --fail)
         force_fail_on_error=1
         shift 0
         ;;
   	    -l|--list)
         list_tools
         exit 0
         ;;
   	    -v|--verbose)
         set -x
         shift 0
         ;;
        *) 
         echo "Option '$1' is not recognized"
         echo
         help
         exit 1
         ;;
      esac
      shift
done

if [ -z "$tool" ]; then
   echo "No tools specified - installing all"
fi

if ! [ -f $HOME/.c4p_config ]; then
    touch $HOME/.c4p_config
fi

for dir in $(ls -d -1 $TOOLS_DIR/**); do
    if ! verify $dir; then
        continue
    fi
    current_tool=$(echo $dir | awk -F '/' '{print $NF}')
    if [ "$tool" != "all" ] && [ "$tool" != "$current_tool" ]; then
        echo "Skipping installation of tool $current_tool"
        continue
    fi
    bash $dir/test.sh $current_tool 1 2>/dev/null
    if [ $? -eq 0 ] && [ $force_install -eq 0 ]; then
        echo "Tool $current_tool already installed - skipping"
        continue
    else
        echo "Tool $current_tool is not installed or is forced to be reinstalled - installing"
    fi
    bash $dir/install.sh $current_tool
    bash $dir/test.sh $current_tool 2>/dev/null
    test_status=$?
    if [ $test_status -eq 1 ] && [ $force_fail_on_error -eq 0 ]; then
        continue
    elif [ $test_status -eq 1 ] && [ $force_fail_on_error -eq 1 ]; then
        echo "Tool $current_tool failed to be installed - exiting"
        exit 1
    fi
done

if ! grep ". $HOME/.c4p_config" "$HOME/.bashrc" &>/dev/null; then
    echo ". $HOME/.c4p_config" >> $HOME/.bashrc
fi