#!/usr/bin/env bash

LIB_PATH="$( cd -- "$( dirname -- "${BASH_SOURCE[0]:-$0}"; )" &> /dev/null && pwd 2> /dev/null; )"
ALL_TOOLS_PATH="$(dirname $LIB_PATH)/tools"
CURRENT_TOOL=$1
CONTAINER_IMAGE=c4p/$CURRENT_TOOL:latest
NO_CONFIG_FILE=${2:-}

if [ -z $CURRENT_TOOL ]; then
    echo "Tool not specified. Pass it as an argument."
    exit 1
fi

CURRENT_TOOL_PATH="$ALL_TOOLS_PATH/$CURRENT_TOOL"

if ! [ -d $CURRENT_TOOL_PATH ]; then
    echo "Tool $CURRENT_TOOL doesn't exist - exiting"
    exit 1
fi

terminate() {
    echo
	echo "Terminating installation..."
    if ! [ -z "${C4P_BACKGROUND_PROCESS_PID}" ]; then
        kill -9 "$C4P_BACKGROUND_PROCESS_PID"
    fi
	exit 1
}
trap terminate SIGINT
trap terminate INT

cleanup() {
    if [ -f "docker-$CURRENT_TOOL.logs" ]; then
        mv docker-$CURRENT_TOOL.logs /tmp/c4p.docker-$CURRENT_TOOL-$(date +"%s").logs
    fi
    unset C4P_BACKGROUND_PROCESS_PID

}
trap cleanup EXIT

source "$LIB_PATH/logging.sh"

docker build --force-rm \
    -t $CONTAINER_IMAGE -f $CURRENT_TOOL_PATH/Dockerfile \
    --progress=plain $CURRENT_TOOL_PATH > docker-$CURRENT_TOOL.logs &

docker_build_pid="$!"

export C4P_BACKGROUND_PROCESS_PID=$docker_build_pid

wait_for_process_to_end "$docker_build_pid"

if [ -z "$NO_CONFIG_FILE" ]; then
    if ! grep "$CURRENT_TOOL()" $HOME/.c4p_config &>/dev/null; then
        cat >> $HOME/.c4p_config << EOM
$CURRENT_TOOL() {
    $LIB_PATH/run.sh $CURRENT_TOOL "\$@"
}

EOM
    fi
fi