source lib/logging.sh

# Print usage of this script
show_help()
{
    echo "Usage: ./`basename "$0"` -t tool..."
    echo "Install common pentester tools in containers as if they were native"
    echo
    echo "Optional arguments:"
    echo "   -t, --tool             Tool to be installed (default: all)"
    echo "   -f, --force            Force install tool"
    echo "   -l, --list             List available tools"
    echo "       --config           Specify c4p config file to be used as a source for the shell"
    echo
    echo "       --log-level        Level of logging (0 to 4, default: 3)"
    echo "       --log-file         File to send logs to"
    echo "       --only-log-file    Send logs only to file"
    echo
    echo "       --fail             Exit script on error"
    echo "   -v, --verbose          Set verbose mode"
    echo
}

# Print banner with the name of the script 
show_banner() {
    read -r -d "" banner <<< "
[$(date)]
   ___  _ _   ___ 
  / __|| | | | _ \\
 | (__ |_  _||  _/
  \___|  |_| |_|  
                                    
"
    log_raw "$banner"
    echo "" | log_raw
}

# Verify that necessary files exist
validate_tool_directory() {
    dir_to_check=$1
    files_in_dir=$(ls -1 $dir_to_check)
    if [ -f $dir_to_check/.skip ]; then
        log_debug "Skipping tool from $dir_to_check via .skip file"
        return 1
    fi
    if ! [ -f $dir_to_check/Dockerfile ]; then
        log_error "Dockerfile doesn't exist in directory $dir_to_check - skipping"
        return 1
    fi
    if ! [ -f $dir_to_check/test.sh ]; then
        log_error "test.sh doesn't exist in directory $dir_to_check - skipping"
        return 1
    fi
}

# Verify that specified tool is present in tools directory
verify_tool_exists() {
    _tools_dir=$1
    _tool_to_install=$2
    if [ "$_tool_to_install" == "all" ]; then
        return
    fi
    if ! [ -d $_tools_dir/$_tool_to_install ]; then
        log_error "Tool $_tool_to_install doesn't exist - exiting"
        exit 1
    fi
}

# List available tools
list_tools() {
    _tools_dir=$1
    echo "Available tools: "
    for tool in $(ls -1 $_tools_dir/); do
        if [ "$tool" == "template" ]; then
            continue
        fi
        echo -e "\t $tool"
    done
}

verify_log_level() {
    _log_level=$1
    if ! [[ $_log_level =~ ^[0-4]$ ]]; then
        log_error "Enter a valid log level - exiting"
        exit 1  
    fi
}